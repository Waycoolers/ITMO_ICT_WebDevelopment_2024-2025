{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0417\u043e\u0442\u043e\u0432 \u041c\u0438\u0445\u0430\u0438\u043b \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447 \u041f\u043e\u0442\u043e\u043a 2.2","title":"Home"},{"location":"#web-","text":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"#_1","text":"","title":"\u0417\u043e\u0442\u043e\u0432 \u041c\u0438\u0445\u0430\u0438\u043b \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447"},{"location":"#22","text":"","title":"\u041f\u043e\u0442\u043e\u043a 2.2"},{"location":"lab1/task1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP. \u041a\u043e\u0434 \u0421\u0435\u0440\u0432\u0435\u0440 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 (AF_INET - IPv4, SOCK_DGRAM - UDP) sock.bind(('localhost', 2024)) # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c ip \u0445\u043e\u0441\u0442\u0430 \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0440\u0442\u0430 print(\"Server listening on port 2024\") message = \"Hello, client\" while True: data, client_addr = sock.recvfrom(1024) print(data.decode()) sock.sendto(message.encode(), client_addr) \u041a\u043b\u0438\u0435\u043d\u0442 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) message = \"Hello, server\" sock.sendto(message.encode(), ('localhost', 2024)) data, server = sock.recvfrom(1024) print(data.decode()) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/task1/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1/task1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task1/#_2","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"lab1/task1/#_3","text":"","title":"\u041a\u043e\u0434"},{"location":"lab1/task1/#_4","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 (AF_INET - IPv4, SOCK_DGRAM - UDP) sock.bind(('localhost', 2024)) # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c ip \u0445\u043e\u0441\u0442\u0430 \u0438 \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0440\u0442\u0430 print(\"Server listening on port 2024\") message = \"Hello, client\" while True: data, client_addr = sock.recvfrom(1024) print(data.decode()) sock.sendto(message.encode(), client_addr)","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"lab1/task1/#_5","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) message = \"Hello, server\" sock.sendto(message.encode(), ('localhost', 2024)) data, server = sock.recvfrom(1024) print(data.decode()) sock.close()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"lab1/task2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439: \u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u043d\u0432\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430. \u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0431\u043e\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430: \u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435 (\u043f\u044f\u0442\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1 \u0438 \u0442.\u0434.). (\u0412\u0430\u0440\u0438\u0430\u043d\u0442 1) \u041a\u043e\u0434 \u0421\u0435\u0440\u0432\u0435\u0440 import socket def quadratic_equation_solver(a, b, c): d = b**2-4*a*c if d < 0: return 'This equation has no roots' elif d == 0: return f'{round((-b/(2*a)), 2)}' else: return f'{round((-b-d**0.5)/(2*a), 2)}, {round((-b+d**0.5)/(2*a), 2)}' sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 2024)) sock.listen(0) print(\"Server listening on port 2024\") while True: client_socket, client_address = sock.accept() print(\"Got connection from\", client_address) while True: data = client_socket.recv(1024) if not data: print(\"Connection closed\") break try: a, b, c = map(float, data.split()) result = quadratic_equation_solver(a, b, c) client_socket.send(result.encode()) except Exception as error: client_socket.send(f\"This error occurred: {error}\".encode()) \u041a\u043b\u0438\u0435\u043d\u0442 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 2024) sock.connect(server_address) while True: message = input('Enter the coefficients of the equation (Enter to exit): ') if not message: break sock.send(message.encode()) result = sock.recv(1024) print(result.decode()) sock.close()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/task2/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1/task2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task2/#_2","text":"\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u043d\u0432\u0435\u043d\u0438\u044f. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u0442\u0440\u0430\u043f\u0435\u0446\u0438\u0438. \u041f\u043e\u0438\u0441\u043a \u043f\u043b\u043e\u0449\u0430\u0434\u0438 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u043e\u0433\u0440\u0430\u043c\u043c\u0430.","title":"\u0412\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439:"},{"location":"lab1/task2/#_3","text":"\u0412\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u0432\u043e\u043c\u0443 \u043d\u043e\u043c\u0435\u0440\u0443 \u0432 \u0436\u0443\u0440\u043d\u0430\u043b\u0435 (\u043f\u044f\u0442\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 1 \u0438 \u0442.\u0434.). (\u0412\u0430\u0440\u0438\u0430\u043d\u0442 1)","title":"\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0432\u044b\u0431\u043e\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430:"},{"location":"lab1/task2/#_4","text":"","title":"\u041a\u043e\u0434"},{"location":"lab1/task2/#_5","text":"import socket def quadratic_equation_solver(a, b, c): d = b**2-4*a*c if d < 0: return 'This equation has no roots' elif d == 0: return f'{round((-b/(2*a)), 2)}' else: return f'{round((-b-d**0.5)/(2*a), 2)}, {round((-b+d**0.5)/(2*a), 2)}' sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 2024)) sock.listen(0) print(\"Server listening on port 2024\") while True: client_socket, client_address = sock.accept() print(\"Got connection from\", client_address) while True: data = client_socket.recv(1024) if not data: print(\"Connection closed\") break try: a, b, c = map(float, data.split()) result = quadratic_equation_solver(a, b, c) client_socket.send(result.encode()) except Exception as error: client_socket.send(f\"This error occurred: {error}\".encode())","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"lab1/task2/#_6","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 2024) sock.connect(server_address) while True: message = input('Enter the coefficients of the equation (Enter to exit): ') if not message: break sock.send(message.encode()) result = sock.recv(1024) print(result.decode()) sock.close()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"lab1/task3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u041a\u043e\u0434 \u0421\u0435\u0440\u0432\u0435\u0440 import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 2024)) sock.listen(0) print(\"Server listening on port 2024\") with open(\"index.html\", encoding='utf-8') as file: page = file.read() while True: client_socket, client_address = sock.accept() print(\"Got connection from\", client_address) client_socket.sendall(f\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n{page}\".encode())","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/task3/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1/task3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html .","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task3/#_2","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket .","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"lab1/task3/#_3","text":"","title":"\u041a\u043e\u0434"},{"location":"lab1/task3/#_4","text":"import socket sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 2024)) sock.listen(0) print(\"Server listening on port 2024\") with open(\"index.html\", encoding='utf-8') as file: page = file.read() while True: client_socket, client_address = sock.accept() print(\"Got connection from\", client_address) client_socket.sendall(f\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n{page}\".encode())","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"lab1/task4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: \u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading . \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f: \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP: 100% \u0431\u0430\u043b\u043b\u043e\u0432. \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UDP: 80% \u0431\u0430\u043b\u043b\u043e\u0432. \u0414\u043b\u044f UDP \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 threading \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435. \u0414\u043b\u044f TCP \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP. \u041a\u043e\u0434 \u0421\u0435\u0440\u0432\u0435\u0440 import socket import threading members = {} # nickname: client_socket def start_chat(sock): while True: client_socket, client_address = sock.accept() print(\"Got connection from\", client_address) threading.Thread(target=handle_clients, args=(client_socket,)).start() def sending_messages(message, nick): for nickname in members.keys(): if nickname != nick: members[nickname].sendall(message.encode()) def handle_clients(client): client.send(\"Enter your nickname to join the chat\".encode()) nickname = client.recv(1024).decode() members[nickname] = client sending_messages(f\"New user joined: {nickname}\", nickname) while True: try: message = client.recv(1024).decode() sending_messages(message, nickname) except Exception as error: client.sendall(f\"This error occurred: {error}\".encode()) def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 2024)) sock.listen(5) print(\"Server listening on port 2024\") start_chat(sock) if __name__ == '__main__': run() \u041a\u043b\u0438\u0435\u043d\u0442 import socket import threading def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 2024) sock.connect(server_address) message = sock.recv(1024) print(message.decode()) nickname = input('Nickname: ') sock.send(nickname.encode()) threading.Thread(target=accept_messages, args=(sock,)).start() threading.Thread(target=send_messages, args=(sock,)).start() def send_messages(sock): while True: message = input(\"\") sock.sendall(message.encode()) def accept_messages(sock): while True: message = sock.recv(1024) print(message.decode()) if __name__ == '__main__': run()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/task4/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1/task4/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task4/#_2","text":"\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket . \u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading .","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:"},{"location":"lab1/task4/#_3","text":"\u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP: 100% \u0431\u0430\u043b\u043b\u043e\u0432. \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UDP: 80% \u0431\u0430\u043b\u043b\u043e\u0432. \u0414\u043b\u044f UDP \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 threading \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0435. \u0414\u043b\u044f TCP \u0437\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0442\u043e\u043a\u0430\u0445. \u041d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c\u0442\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f:"},{"location":"lab1/task4/#_4","text":"","title":"\u041a\u043e\u0434"},{"location":"lab1/task4/#_5","text":"import socket import threading members = {} # nickname: client_socket def start_chat(sock): while True: client_socket, client_address = sock.accept() print(\"Got connection from\", client_address) threading.Thread(target=handle_clients, args=(client_socket,)).start() def sending_messages(message, nick): for nickname in members.keys(): if nickname != nick: members[nickname].sendall(message.encode()) def handle_clients(client): client.send(\"Enter your nickname to join the chat\".encode()) nickname = client.recv(1024).decode() members[nickname] = client sending_messages(f\"New user joined: {nickname}\", nickname) while True: try: message = client.recv(1024).decode() sending_messages(message, nickname) except Exception as error: client.sendall(f\"This error occurred: {error}\".encode()) def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind(('localhost', 2024)) sock.listen(5) print(\"Server listening on port 2024\") start_chat(sock) if __name__ == '__main__': run()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"lab1/task4/#_6","text":"import socket import threading def run(): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_address = ('localhost', 2024) sock.connect(server_address) message = sock.recv(1024) print(message.decode()) nickname = input('Nickname: ') sock.send(nickname.encode()) threading.Thread(target=accept_messages, args=(sock,)).start() threading.Thread(target=send_messages, args=(sock,)).start() def send_messages(sock): while True: message = input(\"\") sock.sendall(message.encode()) def accept_messages(sock): while True: message = sock.recv(1024) print(message.decode()) if __name__ == '__main__': run()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"lab1/task5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041a\u043e\u0434 \u0421\u0435\u0440\u0432\u0435\u0440 http_server.py import socket from Lr1.Task5.request import Request class MyHTTPServer: sock = None courses = {} # course: grade def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.address = (host, port) def serve_forever(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.bind(self.address) self.sock.listen(5) print('Serving HTTP on {}'.format(self.address)) while True: client_socket, client_address = self.sock.accept() print(\"Got connection from\", client_address) self.serve_client(client_socket) def serve_client(self, client_socket): data = client_socket.recv(1024) data_decoded = data.decode() print(f\"Received:\\n{data_decoded}\") method, url, version = self.parse_request(data_decoded) headers = self.parse_headers(data_decoded) body = self.parse_body(data_decoded) request = Request(method, url, version, headers, body) self.handle_request(request, client_socket) @staticmethod def parse_request(data): line = '' i = 0 while '\\r\\n' not in line: line += data[i] i += 1 request_line = line.replace('\\r\\n', '').split() method = request_line[0] url = request_line[1] version = request_line[2] return method, url, version @staticmethod def parse_headers(data): headers = {} lines = data.split('\\r\\n')[1:-2] for line in lines: header, value = line.split(': ') headers[header] = value return headers @staticmethod def parse_body(data): body = data.split('\\r\\n\\r\\n')[1] return body def handle_request(self, request: Request, client_socket): if request.method == \"GET\" and request.path == \"/courses\": self.handle_get(client_socket) elif request.method == \"POST\" and request.path == \"/courses\": self.handle_post(client_socket, request.query) else: self.send_response(client_socket, \"<html><body><h1>Invalid request!</h1></body></html>\", 400) @staticmethod def send_response(client_socket, body, status_code): status_messages = { 200: \"200 OK\", 201: \"201 Created\", 400: \"400 Bad Request\", 404: \"404 Not Found\" } status_message = status_messages.get(status_code, \"500 Internal Server Error\") status_line = f'HTTP/1.1 {status_message}\\r\\n' headers = f'Content-Type: text/html; charset=utf-8\\r\\nContent-Length: {len(body)}\\r\\n\\r\\n' response = status_line + headers + body client_socket.sendall(response.encode()) print(f\"Sent:\\n{response}\") def handle_get(self, client_socket): if self.courses: html = \"<html><body><h1>Courses and Grades</h1><ul>\" for course, grade in self.courses.items(): html += f\"<li>{course}: {grade}</li>\" html += \"</ul></body></html>\" self.send_response(client_socket, html, 200) else: self.send_response(client_socket, \"<html><body><h1>No courses found!</h1></body></html>\", 404) def handle_post(self, client_socket, query): try: if query['course'] and query['grade']: course = query['course'][0] grade = query['grade'][0] self.courses[course] = grade body, status_code = \"OK\", 201 else: body, status_code = \"Invalid data\", 400 self.send_response(client_socket, body, status_code) except Exception as e: self.send_response(client_socket, f\"<html><body><h1>{e}</h1></body></html>\", 500) if __name__ == '__main__': host = '127.0.0.1' port = 2024 name = \"My first HTTPServer\" serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass request.py from functools import lru_cache from urllib.parse import urlparse, parse_qs class Request: def __init__(self, method: str, target: str, version: str, headers: dict, body: str): self.method = method self.target = target self.version = version self.headers = headers self.body = body @property def path(self): return self.url.path @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1/task5/#5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1/task5/#_1","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.","title":"\u0423\u0441\u043b\u043e\u0432\u0438\u0435"},{"location":"lab1/task5/#_2","text":"\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435:"},{"location":"lab1/task5/#_3","text":"","title":"\u041a\u043e\u0434"},{"location":"lab1/task5/#_4","text":"","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"lab1/task5/#http_serverpy","text":"import socket from Lr1.Task5.request import Request class MyHTTPServer: sock = None courses = {} # course: grade def __init__(self, host, port, name): self.host = host self.port = port self.name = name self.address = (host, port) def serve_forever(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.bind(self.address) self.sock.listen(5) print('Serving HTTP on {}'.format(self.address)) while True: client_socket, client_address = self.sock.accept() print(\"Got connection from\", client_address) self.serve_client(client_socket) def serve_client(self, client_socket): data = client_socket.recv(1024) data_decoded = data.decode() print(f\"Received:\\n{data_decoded}\") method, url, version = self.parse_request(data_decoded) headers = self.parse_headers(data_decoded) body = self.parse_body(data_decoded) request = Request(method, url, version, headers, body) self.handle_request(request, client_socket) @staticmethod def parse_request(data): line = '' i = 0 while '\\r\\n' not in line: line += data[i] i += 1 request_line = line.replace('\\r\\n', '').split() method = request_line[0] url = request_line[1] version = request_line[2] return method, url, version @staticmethod def parse_headers(data): headers = {} lines = data.split('\\r\\n')[1:-2] for line in lines: header, value = line.split(': ') headers[header] = value return headers @staticmethod def parse_body(data): body = data.split('\\r\\n\\r\\n')[1] return body def handle_request(self, request: Request, client_socket): if request.method == \"GET\" and request.path == \"/courses\": self.handle_get(client_socket) elif request.method == \"POST\" and request.path == \"/courses\": self.handle_post(client_socket, request.query) else: self.send_response(client_socket, \"<html><body><h1>Invalid request!</h1></body></html>\", 400) @staticmethod def send_response(client_socket, body, status_code): status_messages = { 200: \"200 OK\", 201: \"201 Created\", 400: \"400 Bad Request\", 404: \"404 Not Found\" } status_message = status_messages.get(status_code, \"500 Internal Server Error\") status_line = f'HTTP/1.1 {status_message}\\r\\n' headers = f'Content-Type: text/html; charset=utf-8\\r\\nContent-Length: {len(body)}\\r\\n\\r\\n' response = status_line + headers + body client_socket.sendall(response.encode()) print(f\"Sent:\\n{response}\") def handle_get(self, client_socket): if self.courses: html = \"<html><body><h1>Courses and Grades</h1><ul>\" for course, grade in self.courses.items(): html += f\"<li>{course}: {grade}</li>\" html += \"</ul></body></html>\" self.send_response(client_socket, html, 200) else: self.send_response(client_socket, \"<html><body><h1>No courses found!</h1></body></html>\", 404) def handle_post(self, client_socket, query): try: if query['course'] and query['grade']: course = query['course'][0] grade = query['grade'][0] self.courses[course] = grade body, status_code = \"OK\", 201 else: body, status_code = \"Invalid data\", 400 self.send_response(client_socket, body, status_code) except Exception as e: self.send_response(client_socket, f\"<html><body><h1>{e}</h1></body></html>\", 500) if __name__ == '__main__': host = '127.0.0.1' port = 2024 name = \"My first HTTPServer\" serv = MyHTTPServer(host, port, name) try: serv.serve_forever() except KeyboardInterrupt: pass","title":"http_server.py"},{"location":"lab1/task5/#requestpy","text":"from functools import lru_cache from urllib.parse import urlparse, parse_qs class Request: def __init__(self, method: str, target: str, version: str, headers: dict, body: str): self.method = method self.target = target self.version = version self.headers = headers self.body = body @property def path(self): return self.url.path @property @lru_cache(maxsize=None) def query(self): return parse_qs(self.url.query) @property @lru_cache(maxsize=None) def url(self): return urlparse(self.target)","title":"request.py"}]}